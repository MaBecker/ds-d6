diff --git a/boards/DSD6.py b/boards/DSD6.py
new file mode 100644
index 00000000..ea389d44
--- /dev/null
+++ b/boards/DSD6.py
@@ -0,0 +1,147 @@
+#!/bin/false
+# This file is part of Espruino, a JavaScript interpreter for Microcontrollers
+#
+# Copyright (C) 2013 Gordon Williams <gw@pur3.co.uk>
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+# ----------------------------------------------------------------------------------------
+# This file contains information for a specific board - the available pins, and where LEDs,
+# Buttons, and other in-built peripherals are. It is used to build documentation as well
+# as various source and header files for Espruino.
+# ----------------------------------------------------------------------------------------
+
+import pinutils;
+
+info = {
+ 'name' : "DS-D6",
+ 'link' :  [ "http://www.espruino.com/MDBT42Q" ],
+ 'espruino_page_link' : 'MDBT42Q', 
+ 'default_console' : "EV_SERIAL1",
+ 'default_console_tx' : "D23",
+ 'default_console_rx' : "D22",
+ 'default_console_baudrate' : "38400",
+ 'variables' : 2550, # How many variables are allocated for Espruino to use. RAM will be overflowed if this number is too high and code won't compile.
+ 'bootloader' : 1,
+ 'binary_name' : 'espruino_%v_ds-d6.hex',
+ 'build' : {
+   'optimizeflags' : '-Os',
+   'libraries' : [
+     'BLUETOOTH',
+     #'NET',
+     'GRAPHICS',
+     #'CRYPTO','SHA256','SHA512',
+     #'AES',
+     #'NFC',
+     #'NEOPIXEL'
+     #'FILESYSTEM'
+     #'TLS'
+   ],
+   'makefile' : [
+     'DEFINES+=-DHAL_NFC_ENGINEERING_BC_FTPAN_WORKAROUND=1', # Looks like proper production nRF52s had this issue
+#     'DEFINES+=-DCONFIG_GPIO_AS_PINRESET', # Allow the reset pin to work
+#     'DEFINES+=-DPEER_MANAGER_ENABLED=1',
+#     'DEFINES+=-DDISABLE_CONSOLE_POWERSAVE_ON_BOOT=1 ', #DS-D6 custom code, removed
+     'DEFINES+=-DBLUETOOTH_NAME_PREFIX=\'"DS-D6"\'',
+     'JSMODULESOURCES+=libs/js/Font4x4.min.js',
+     'JSMODULESOURCES+=libs/js/Font4x8Numeric.min.js',
+     'JSMODULESOURCES+=libs/js/Font4x4Numeric.min.js',
+     'JSMODULESOURCES+=libs/js/Font6x8.min.js',
+     'JSMODULESOURCES+=libs/js/Font6x12.min.js',
+     'JSMODULESOURCES+=libs/js/Font8x12.min.js',
+     'JSMODULESOURCES+=libs/js/Font8x16.min.js',
+     'JSMODULESOURCES+=libs/js/FontDennis8.min.js',
+#     'JSMODULESOURCES+=libs/js/SSD1306.min.js', # this watch has SPI OLED - SCK 6 MOSI 5 RST 4 DC 28 CS 29
+#     'JSMODULESOURCES+=libs/js/DSD6.js',
+#     'DFU_PRIVATE_KEY=targets/nrf5x_dfu/dfu_private_key.pem',
+     'DFU_SETTINGS=--application-version 0xff --sd-req 129,136'
+   ]
+ }
+};
+
+chip = {
+  'part' : "NRF52832",
+  'family' : "NRF52",
+  'package' : "QFN48",
+  'ram' : 64,
+  'flash' : 512,
+  'speed' : 64,
+  'usart' : 1,
+  'spi' : 1,
+  'i2c' : 1,
+  'adc' : 1,
+  'dac' : 0,
+  'saved_code' : {
+    'address' : ((118 - 20) * 4096), # Bootloader takes pages 120-127, FS takes 118-119
+    'page_size' : 4096,
+    'pages' : 20,
+    'flash_available' : 512 - ((28 + 8 + 2 + 20)*4) # Softdevice uses 28 pages of flash, bootloader 8, FS 2, code 20. Each page is 4 kb.
+  },
+};
+
+devices = {
+  'BTN1' : { 'pin' : 'D30', 'pinstate' : 'IN_PULLDOWN' },
+};
+
+
+def get_pins():
+  pins = pinutils.generate_pins(0,31) # 32 General Purpose I/O Pins.
+  pinutils.findpin(pins, "PD5", True)["functions"]["SPI1_SCK"]=0;
+  pinutils.findpin(pins, "PD6", True)["functions"]["SPI1_MOSI"]=0;
+  pinutils.findpin(pins, "PD7", True)["functions"]["I2C1_SCL"]=0;
+  pinutils.findpin(pins, "PD8", True)["functions"]["I2C1_SDA"]=0;
+#only 1 I2C available in Espruino
+#  pinutils.findpin(pins, "PD13", True)["functions"]["I2C2_SCL"]=0;
+#  pinutils.findpin(pins, "PD14", True)["functions"]["I2C2_SDA"]=0;
+  pinutils.findpin(pins, "PD22", True)["functions"]["USART1_RX"]=0;
+  pinutils.findpin(pins, "PD23", True)["functions"]["USART1_TX"]=0;
+  pinutils.findpin(pins, "PD30", True)["functions"]["NEGATED"]=0; # button goes low when pressed, negate
+# hardwired NRF52 analog inputs
+  pinutils.findpin(pins, "PD2", True)["functions"]["ADC1_IN0"]=0;
+  pinutils.findpin(pins, "PD3", True)["functions"]["ADC1_IN1"]=0;
+  pinutils.findpin(pins, "PD4", True)["functions"]["ADC1_IN2"]=0;
+  pinutils.findpin(pins, "PD5", True)["functions"]["ADC1_IN3"]=0;
+  pinutils.findpin(pins, "PD28", True)["functions"]["ADC1_IN4"]=0;
+  pinutils.findpin(pins, "PD29", True)["functions"]["ADC1_IN5"]=0;
+  pinutils.findpin(pins, "PD30", True)["functions"]["ADC1_IN6"]=0;
+  pinutils.findpin(pins, "PD31", True)["functions"]["ADC1_IN7"]=0;
+  # everything is non-5v tolerant
+  for pin in pins:
+    pin["functions"]["3.3"]=0;
+
+  #The boot/reset button will function as a reset button in normal operation. Pin reset on PD21 needs to be enabled on the nRF52832 device for this to work.
+  return pins
+
+# left-right, or top-bottom order
+board_module = {
+  'left' : [ 'GND','','','','D25','D26','D27','D28','D29','D30','D31','DEC4','DCC','VDD'],
+  'right2' : [ 'D24', '', 'D23'],
+  'right' : [ 'GND','D22','SWDIO','SWDCLK','D21','D20','D19','D18','D17','D16','D15','D14','D13','D12','D11' ],
+  'bottom' : [ 'GND','D0','D1','D2','D3','D4','D5','D6','D7','D8','D9','D10','GND' ],
+  '_notes' : {
+    'D21' : "Also NRST if configured"
+  }
+};
+
+board_module["_css"] = """
+""";
+
+board_breakout = {
+  'left' : [ 'D25','D26','D27','D28','D29','D30','D31','D3','D4','D5','D11' ],
+  'right' : [ 'D22','D20','D19','D18','D17','D16','D15','D14','3.3','Vin','GND'],
+  'bottom' : [ 'D6','D8','D7','Vin','GND' ],
+  'top' : [ 'D9','D10' ], 
+  '_hide_not_on_connectors' : True,
+  '_class' : "board_breakout",
+  '_notes' : {
+    'D22' : "Serial Console RX when Bluetooth disconnected",
+    'D23' : "Serial Console TX when Bluetooth disconnected",
+  }
+};
+
+board_breakout["_css"] = """
+""";
+
+boards = [board_module, board_breakout];
diff --git a/make/common/NRF5X.make b/make/common/NRF5X.make
index 124bf1f5..6573a650 100644
--- a/make/common/NRF5X.make
+++ b/make/common/NRF5X.make
@@ -30,6 +30,9 @@ ARM_HAS_OWN_CMSIS = 1 # Nordic uses its own CMSIS files in its SDK, these are up
 INCLUDE += -I$(NRF5X_SDK_PATH)
 
 # This is where the common linker for both nRF51 & nRF52 is stored.
+ifdef NRF5X_SDK_11
+LDFLAGS += -L$(NRF5X_SDK_PATH)/nrf5x_linkers 
+endif
 ifdef NRF5X_SDK_12
 LDFLAGS += -L$(NRF5X_SDK_PATH)/nrf5x_linkers 
 endif
@@ -78,11 +81,13 @@ INCLUDE += -I$(NRF5X_SDK_PATH)/components/libraries/util
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/drivers_nrf/delay
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/drivers_nrf/uart
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/libraries/fds
+INCLUDE += -I$(NRF5X_SDK_PATH)/components/libraries/fds/config
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/ble/common
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/device
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/libraries/button
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/libraries/timer
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/libraries/fstorage
+INCLUDE += -I$(NRF5X_SDK_PATH)/components/libraries/fstorage/config
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/libraries/queue
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/libraries/experimental_section_vars
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/drivers_nrf/gpiote
@@ -97,7 +102,8 @@ INCLUDE += -I$(NRF5X_SDK_PATH)/components/drivers_nrf/ppi
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/drivers_nrf/hal/nrf_pwm
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/drivers_nrf/clock
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/drivers_nrf/rng
-ifdef NRF5X_SDK_12
+ifneq ($(or $(NRF5X_SDK_12),$(NRF5X_SDK_11)),)
+#ifdef NRF5X_SDK_12
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/libraries/log
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/libraries/log/src
 else
@@ -170,14 +176,22 @@ $(NRF5X_SDK_PATH)/components/ble/peer_manager/gatt_cache_manager.c \
 $(NRF5X_SDK_PATH)/components/ble/peer_manager/gatts_cache_manager.c \
 $(NRF5X_SDK_PATH)/components/libraries/timer/app_timer.c \
 $(NRF5X_SDK_PATH)/components/libraries/fds/fds.c \
-$(NRF5X_SDK_PATH)/components/libraries/queue/nrf_queue.c \
 $(NRF5X_SDK_PATH)/components/libraries/util/app_util_platform.c \
 $(NRF5X_SDK_PATH)/components/libraries/util/sdk_mapped_flags.c \
 $(NRF5X_SDK_PATH)/components/libraries/util/app_error.c \
 $(NRF5X_SDK_PATH)/components/libraries/util/nrf_assert.c 
 
+ifdef NRF5X_SDK_11
+TARGETSOURCES += \
+$(NRF5X_SDK_PATH)/components/drivers_nrf/delay/nrf_delay.c \
+$(NRF5X_SDK_PATH)/components/drivers_nrf/hal/nrf_saadc.c \
+$(NRF5X_SDK_PATH)/components/libraries/queue/nrf_queue.c
+else
+TARGETSOURCES += \
+$(NRF5X_SDK_PATH)/components/libraries/queue/nrf_queue.c
+endif
 
-ifdef NRF5X_SDK_12
+ifneq ($(or $(NRF5X_SDK_12),$(NRF5X_SDK_11)),)
 TARGETSOURCES += \
 $(NRF5X_SDK_PATH)/components/softdevice/common/softdevice_handler/softdevice_handler.c \
 $(NRF5X_SDK_PATH)/components/libraries/fstorage/fstorage.c \
@@ -284,9 +298,9 @@ $(PROJ_NAME).hex: $(PROJ_NAME).app_hex
 
 $(PROJ_NAME).zip: $(PROJ_NAME).app_hex
 	@echo Creating DFU ZIP
-	# nrfutil  pkg generate --help
+	# adafruit-nrfutil dfu genpkg --help
 	@cp $(PROJ_NAME).app_hex $(PROJ_NAME)_app.hex
-	nrfutil pkg generate $(PROJ_NAME).zip --application $(PROJ_NAME)_app.hex $(DFU_SETTINGS) --key-file $(DFU_PRIVATE_KEY)
+	adafruit-nrfutil dfu genpkg --application $(PROJ_NAME)_app.hex $(DFU_SETTINGS) $(PROJ_NAME).zip 
 	 @rm $(PROJ_NAME)_app.hex
 
 flash: all
diff --git a/make/family/NRF52.make b/make/family/NRF52.make
index 95ba8a8f..f7c3dd9c 100644
--- a/make/family/NRF52.make
+++ b/make/family/NRF52.make
@@ -40,15 +40,28 @@ else  # NRF52832
 SOFTDEVICE        = $(SOFTDEVICE_PATH)/hex/s132_nrf52_5.0.0_softdevice.hex
 endif
 else
+ifdef NRF_SDK11
+# Use SDK11
+NRF5X_SDK=11
+NRF5X_SDK_11=1
+NRF5X_SDK_PATH=$(ROOT)/targetlibs/nrf5x_11
+DEFINES += -DNRF_SD_BLE_API_VERSION=2
+SOFTDEVICE        = $(SOFTDEVICE_PATH)/hex/s132_nrf52_2.0.0_softdevice.hex
+#DEFINES += -DS132
+else
 # Use SDK12
 NRF5X_SDK=12
 NRF5X_SDK_12=1
 NRF5X_SDK_PATH=$(ROOT)/targetlibs/nrf5x_12
 DEFINES += -DNRF_SD_BLE_API_VERSION=3
 SOFTDEVICE        = $(SOFTDEVICE_PATH)/hex/s132_nrf52_3.0.0_softdevice.hex
+#SDVER=S132v3
+#DEFINES += -DNRF_SD_BLE_API_VERSION=2
+#SOFTDEVICE        = $(SOFTDEVICE_PATH)/hex/s132_nrf52_2.0.0_softdevice.hex
+#SDVER=S132v2
+endif
 endif
 endif
-
 
 # ARCHFLAGS are shared by both CFLAGS and LDFLAGS.
 ARCHFLAGS = -mcpu=cortex-m4 -mthumb -mabi=aapcs -mfloat-abi=hard -mfpu=fpv4-sp-d16
@@ -130,6 +143,9 @@ TARGETSOURCES += $(NRF5X_SDK_PATH)/components/libraries/ecc/ecc.c
 INCLUDE += -I$(NRF5X_SDK_PATH)/components/drivers_nrf/rng
 INCLUDE += -I$(NRF5X_SDK_PATH)/external/micro-ecc
 TARGETSOURCES += $(NRF5X_SDK_PATH)/external/micro-ecc/uECC.c
+ifndef NRF5X_SDK_11
+endif
+
 endif # BOOTLOADER
 
 include make/common/NRF5X.make
diff --git a/targets/nrf5x/bluetooth.c b/targets/nrf5x/bluetooth.c
index f5677cff..cacee6f5 100644
--- a/targets/nrf5x/bluetooth.c
+++ b/targets/nrf5x/bluetooth.c
@@ -2347,7 +2347,11 @@ void jsble_advertising_stop() {
    if (v) {
      ble_gap_addr_t p_addr;
      if (bleVarToAddr(v, &p_addr)) {
+#if NRF_SD_BLE_API_VERSION < 3
+       err_code = sd_ble_gap_address_set(BLE_GAP_ADDR_CYCLE_MODE_NONE,&p_addr);
+#else
        err_code = sd_ble_gap_addr_set(&p_addr);
+#endif
        if (err_code) jsiConsolePrintf("sd_ble_gap_addr_set failed: 0x%x\n", err_code);
      }
    }
diff --git a/targets/nrf5x/jshardware.c b/targets/nrf5x/jshardware.c
index bf42a90b..684a0633 100644
--- a/targets/nrf5x/jshardware.c
+++ b/targets/nrf5x/jshardware.c
@@ -52,8 +52,9 @@
 void app_error_fault_handler(uint32_t id, uint32_t pc, uint32_t info) {
 }
 #endif
-
+#ifndef NRF5X_SDK_11
 #include "nrf_peripherals.h"
+#endif
 #include "nrf_gpio.h"
 #include "nrf_gpiote.h"
 #include "nrf_timer.h"
@@ -253,7 +254,37 @@ bool spi0Initialised = false;
 static const nrf_drv_twi_t TWI1 = NRF_DRV_TWI_INSTANCE(1);
 bool twi1Initialised = false;
 
+#ifdef NRF5X_SDK_11
+// UART does not support instance numbers
+#define nrf_drv_uart_rx(u,b,l) nrf_drv_uart_rx(b,l)
+#define nrf_drv_uart_tx(u,b,l) nrf_drv_uart_tx(b,l)
+#define nrf_drv_uart_rx_disable(u) nrf_drv_uart_rx_disable()
+#define nrf_drv_uart_rx_enable(u) nrf_drv_uart_rx_enable()
+#define nrf_drv_uart_tx_abort(u) nrf_drv_uart_tx_abort()
+#define nrf_drv_uart_uninit(u) nrf_drv_uart_uninit()
+#define nrf_drv_uart_init(u,c,h) nrf_drv_uart_init(c,h)
+
+// different name in SDK11
+#define GPIOTE_CH_NUM NUMBER_OF_GPIO_TE
+
+//this macro in SDK11 needs instance id and contains useless pin defaults so just copy generic version from SDK12
+#undef NRF_DRV_SPI_DEFAULT_CONFIG
+#define NRF_DRV_SPI_DEFAULT_CONFIG                           \
+{                                                            \
+    .sck_pin      = NRF_DRV_SPI_PIN_NOT_USED,                \
+    .mosi_pin     = NRF_DRV_SPI_PIN_NOT_USED,                \
+    .miso_pin     = NRF_DRV_SPI_PIN_NOT_USED,                \
+    .ss_pin       = NRF_DRV_SPI_PIN_NOT_USED,                \
+    .irq_priority = SPI0_CONFIG_IRQ_PRIORITY,         \
+    .orc          = 0xFF,                                    \
+    .frequency    = NRF_DRV_SPI_FREQ_4M,                     \
+    .mode         = NRF_DRV_SPI_MODE_0,                      \
+    .bit_order    = NRF_DRV_SPI_BIT_ORDER_MSB_FIRST,         \
+}
+
+#else
 static const nrf_drv_uart_t UART0 = NRF_DRV_UART_INSTANCE(0);
+#endif
 static uint8_t uart0rxBuffer[2]; // 2 char buffer
 static uint8_t uart0txBuffer[1];
 bool uartIsSending = false;
